// CORS(Cross-Origin Resource Sharing, 교차 출처 리소스 공유)
- HTTP 헤더를 사용하여, 한 출처에서 실행 중인 웹 애플리케이션이 다른 출처의 선택한 자원에 접근할 수 있는 권한을 부여하도록 브라우저에 알려주는 체제
- 웹 애플리케이션이 리소스가 자신의 출처와 다를 때 브라우저는 요청 헤더에 Origin 필드에 요청 출처를 함께 담아 교차 출처 HTTP 요청을 실행한다.
- 출처를 비교하는 로직은 서버에 구현된 스펙이 아닌 브라우저에 구현된 스펙 기준으로 처리되며 브라우저는 클라이언트의 요청 헤더와 서버의 응답헤더를 비교해서 최종 응답을 결정한다.
  두개의 출처를 비교하는 방법은 URL 의 구성요소 중 Protocol, Host, Port 이 세가지가 동일한지 확인하면 되고 나머지는 틀려도 상관없다.


// CORS 요청의 종류
1. Simple Request
    - 예비요청(Preflight) 과정 없이 바로 서버에 본 요청을 한 후, 서버가 응답헤더에 Access-Control-Allow-Origin 과 같은 값을 전송하면
      Browser 가 서로 비교 후 CORS 정책 위반여부를 검사함.
    - 제약사항
        1. GET, POST, HEAD 중의 한가지 Method 를 사용해야 한다.
        2. 헤더는 Accept, Accept-Language, Content-Language, DPR, Downlink, Save-Data, Viewport-Width Width 만 가능하고, Custom Header 도 허용되지 않음
        3. Content-Type 은 application/x-www-form-urlencoded, multipart/form-data, text/plain 만 가능하다.
    - 상단의 제약사항에 만족하면 Browser 가 Simple Request 를 보냄

          JS          (1)         Browser          (2)            Server
           --------> fetch ---------->-------> GET /resource ------->

           <------Promise.then-------<---------200 OK resource-------
                                        Access-Control-Allow-Origin: *
                      (4)                          (3)


2. Preflight Request
    - 브라우저는 요청을 한번에 보내지 않고, 예비요청과 본요청으로 나누어 서버에 전달하는데 브라우저가 예비요청을 보내는 것을 Preflight 라고 하며 이 예비요청의 메서드에는
      OPTIONS 가 사용된다.
    - 예비요청의 역할은 본래 요청을 보내기 전에 브라우저 스스로 안전한 요청인지 확인하는 것으로 요청 사양이 Simple Request 에 해당되지 않을 경우 브라우저가 알아서
      Preflight Request 요청을 실행한다.

          JS          (1)         Browser          (2)            Server
           --------> fetch ---------->------------------------------->
                                            OPTION /resources
                                        Origin: https://security.io

                                     <-------------(3)----------------
                                                 200 OK
                                       Access-Control-Allow-Origin: *

                                     ---------------(4)-------------->
                                              GET /resources
                       (6)
           <------Promise.then-------<-------------(5)---------------
                                                 200 OK

            // Preflight Request 예시 (브라우저가 보낸 요청을 보면 Origin 에 대한 정보 뿐만아니라. 예비 요청 이후에 전송할 본 요청에 대한 다른 정보들도 포함되어있다.)
                OPTIONS https:/auth-server/auth
                Accept: */*
                Accept-Encoding: gzip, deflate, br
                Accept-Language: en-US,en;q=0.9,ko;q=0.8,ja;q=0.7,la;q=0.6
                Access-Control-Request-Headers: content-type                        <- 본요청에서 Content-Type 헤더를 사용할 것을 서버에게 알려주고있음.
                Access-Control-Request-Method: GET                                  <- 본요청에서 GET 메서드를 사용할 것을 서버에게 알려주고 있음
                Connection: keep-alive
                Host: security.io
                Origin: https:// security.io                                        <- https://security.io 출처 에서 요청을 하고있는 의미 (Origin)
                Referer: https:// security.io /login
                Sec-Fetch-Mode: cors
                Sec-Fetch-Site: cross-site

            // Preflight Request 에 대한 응답
                OPTIONS https://security.io/auth 200 OK
                Access-Control-Allow-Origin: https:// security.io                   <- 해당 URL 외의 다른 출처(Origin)로 요청할 경우에는 CORS 정책을 위반했다고 판단하고 오류 메시지를 내고 응답을 버리게 된다는 의미
                Content-Encoding: gzip
                Content-Length: 1024
                Content-Type: text/xml; charset=utf-8
                Date: Sun, 5 May 2022 11:52:33 GMT
                Server: Apache
                Vary: Accept-Encoding
                X-UA-Compatible: CHROME


// 동일 출처(Origin) 기준 (https://security.io)
https://security.io/auth?username=user1             O               스키마, 호스트, 포트가 동일
https://user:password@security.io                   O               스키마, 호스트, 포트가 동일
http://security.io                                  X               스키마가 다름
https://api.security.io                             X               호스트가 다름
https://security.io:8080                           X,?              브라우저의 구현에 따라 다름. explorer 는 포트자체를 무시함


// CORS 해결방안? --> 서버에서 Access-Control-Allow-* 헤더를 세팅해주어야함.
- CORS 를 해결하기위하기 위해서는 서버에서 Access-Control-Allow-* 로 시작하는 헤더를 달아주어서 응답을 내려주어야 함.
- Access-Control-Allow-* 로 시작하는 헤더의 종류는 여러가지가 있다.
    1. Access-Control-Allow-Origin : 헤더에 작성된 Origin 만 브라우저가 리소스를 접근할 수 있도록 허용한다.
            --> *, https://security.io
    2. Access-Control-Allow-Methods : preflight request 에 대한 응답으로 실제 요청 중에 사용할 수 있는 메서드를 나타낸다.
            --> 기본값은 GET, POST, HEAD, OPTIONS, *
    3. Access-Control-Allow-Headers : preflight request 에 대한 응답으로 실제 요청 중에 사용할 수 있는 헤더 필드 이름을 나타낸다.
            --> 기본값은 Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers, Custom Header, *
    4. Access-Control-Allow-Credentials : 실제 요청에 쿠키가 인증 등의 사용자 자격 증명이 포함될 수 있음을 나타낸다. Client 의 credentials:include 일 경우, true 필수
    5. Access-Control-Max-Age : preflight 요청 결과를 캐시할 수 있는 시간을 나타내는 것으로 해당 시간동안은 preflight 요청을 다시 하지 않게 된다.


// CorsConfigurer 역할
- Spring Security 에서 Cors 를 설정하는 설정클래스
- Spring Security 필터 체인에 CorsFilter 를 추가
- corsFilter 라는 이름의 Bean 이 제공되면 해당 CorsFilter 가 사용된다.
- corsFilter 라는 이름의 Bean 이 없고 CorsConfigurationSource 빈이 정의된 경우 해당 CorsConfiguration 이 사용된다.
- CorsConfigurationSource 빈이 정의되어 있지 않은 경우 Spring MVC 가 클래스 경로에 있으면 HandlerMappingIntrospector 가 사용된다.


// CorsFilter 역할
- CORS Preflight Request 를 처리하고 CORS 단순 및 본 요청을 가로채고, 제공된 CorsConfigurationSource 를 통해 일치된 정책에 따라 CORS 응답 헤더와 같은
  응답을 업데이트하기 위한 필터
- Spring MVC Java 구성과 Spring MVC XML 네임스페이스에서 CORS 를 구성하는 대안이라고 볼 수 있음. (예: @CorsOrigin)
- 스프링 웹에 의존하는 응용 프로그램이나 javax.servlet 에서 CORS 검사를 수행해야 하는 보안 제약 조건에 유용한 필터임.


// DEBUG
1. CorsConfigurer
    72: configure 메서드 : ApplicationContext context = http.getSharedObject(ApplicationContext.class);
    80: getCorsFilter 메서드 : if (this.configurationSource != null)
2. CorsFilter
    86,87: doFilterInternal 메서드 : CorsConfiguration corsConfiguration = this.configSource.getCorsConfiguration(request);
